.wrapper.wrapper-content.animated.fadeInRight
  .row
    .col-lg-12
      .ibox.float-e-margins
        .ibox-title
          %h5
            Veuillez remplir toutes les informations concernant votre évènement
        .ibox-content
          = form_for [:admin, @event], validate: true, html: {class: 'form-horizontal'} do |event_form|
            %fieldset
              %legend Informations
              = event_form.text_field :id, id: 'event_id', style: 'display: none', value: @event.id.present? ? @event.id : 0
              .form-group
                %label.col-sm-2.control-label Nom
                .col-sm-10
                  = event_form.text_field :name, class: 'form-control'
              .form-group
                %label.col-sm-2.control-label Date de début
                .col-sm-10
                  = event_form.datetime_select :start_date, { :order => [:day, :month, :year], :use_month_numbers => true }
                %br

              .form-group
                %label.col-sm-2.control-label Date de fin
                .col-sm-10
                  = event_form.datetime_select :end_date, { :order => [:day, :month, :year], :use_month_numbers => true }
                %br

              .form-group
                %label.col-sm-2.control-label Clôture des inscriptions
                .col-sm-10
                  = event_form.datetime_select :registration_deadline, { :order => [:day, :month, :year] , :use_month_numbers => true }
                %br

              .form-group
                %label.col-sm-2.control-label Minimum participants
                .col-sm-10
                  = event_form.text_field :min_participant, class: 'form-control'
                %br

              .form-group
                %label.col-sm-2.control-label Maximum participants
                .col-sm-10
                  = event_form.text_field :max_participant, class: 'form-control'
                %br

              .form-group
                %label.col-sm-2.control-label Prix (en €)
                .col-sm-10
                  = event_form.text_field :price, class: 'form-control'
                %br

            %fieldset
              %legend Lieu
              .form-group
                %label.col-sm-2.control-label Lieu
                .col-sm-10
                  = event_form.select :location_id, options_for_select(Location.all.map{|l|[l.name, l.id]}, @event.location_id), {}, {:class => "form-control select"}

            %fieldset
              %legend Activités
              = event_form.fields_for :event_activities, @event.event_activities.present? ? @event.event_activities : @event.event_activities.build, dynamic: true do |ev_ac_form|
                .form-group
                  %label.col-sm-2.control-label Activité
                  .col-sm-2
                    = ev_ac_form.select :activity_id, options_for_select(Activity.all.map{|a|[a.name, a.id]}, ev_ac_form.object.activity_id), {}, {:class => "form-control select change_with_location"}
                  %label.col-sm-2.control-label En simultané
                  .col-sm-2
                    = ev_ac_form.number_field :simultaneous_activities, {style: 'max-width: 220px'}
                  .col-sm-1
                    = ev_ac_form.remove_fields_link 'Supprimer'
              = event_form.add_fields_link :event_activities, 'Ajouter une activité', { class: 'link_add_activity' }

            %fieldset{style: 'margin-top: 40px'}
              %legend Matériel supplémentaire
              = event_form.fields_for :event_equipment, @event.event_equipment.present? ? @event.event_equipment : @event.event_equipment.build, dynamic: true do |ev_eq_form|
                .form-group
                  %label.col-sm-2.control-label Matériel
                  .col-sm-2
                    = ev_eq_form.select :equipment_id, options_for_select(Equipment.all.map{|e|[e.name, e.id]}, ev_eq_form.object.equipment_id), {}, {:class => "form-control select"}
                  %label.col-sm-2.control-label Quantité
                  .col-sm-2
                    = ev_eq_form.number_field :quantity, {style: 'max-width: 220px'}
                  .col-sm-1
                    = ev_eq_form.remove_fields_link 'Supprimer'
              = event_form.add_fields_link :event_equipment, 'Ajouter du matériel'

            %br
            = render partial: 'shared/contact_form', locals: { form: event_form, object: @event }


            .form-group
              .col-sm-4
                %button.btn.btn-primary{:type => 'submit'} Sauver l'évènement


:javascript
  document.addEventListener('DOMContentLoaded', (event) => {
    const select_location = document.getElementById('event_location_id')
    let location_id = select_location.value
    const event_id = document.getElementById('event_id').value
    if (event_id == 0) {
      set_available_activities(location_id, 'all')
    }
    const sim_ac = document.getElementById('event_event_activities_attributes_0_simultaneous_activities').value
    if (sim_ac == '') set_available_activities(location_id, 'all')
    select_location.addEventListener('change', (e) => {
      location_id = e.target.value
      set_available_activities(location_id, 'all')
    })

    document.querySelector('.link_add_activity').addEventListener('click', (e)=>{
      setTimeout((action) => {
        set_available_activities(location_id, 'last')
      }, 200)
    })
  })

  /*
   * This function fetches the activities and display them according to the activities available per location.
   * params -
   *   location_id => determines which activities to fetch based on the id of the location
   *   which_select => determines which select field from the form to update  !! EITHER 'all' or 'last' !!
   * exemple: get_available_activities(1, 'last') => will update only the last select field with the activities
   *          available for the location with id 1
   */
  function set_available_activities (location_id, which_select) {
    const all_selects = document.querySelectorAll('.change_with_location')
    let select_to_change
    switch (which_select) {
      case 'all': select_to_change = all_selects; break
      case 'last': select_to_change = []; select_to_change.push(all_selects[all_selects.length - 1]); break
    }
    fetch(`/admin/json/location_activities/${location_id}`)
      .then(result => result.json())
      .then(activities => {
        change_select_option(select_to_change, activities)
      })
  }

  function change_select_option (select_to_change, activities) {
    for (let select of select_to_change) {
      select.innerHTML = ''
      for (let activity of activities) {
        let option = document.createElement('option')
        option.value = activity['id']
        option.textContent = activity['name']
        select.appendChild(option)
      }
    }
  }